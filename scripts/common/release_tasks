#!/usr/bin/env bash

#################################################
###   RELEASE TASK COMMANDS - RUNTIME ORDER   ###
#################################################

# These functions are intended to be utilized as task commands invoked from the run_make_task script
# All tasks are generic between projects and should be reusable

push_dev_image() {
    local COMMIT_SHA="${1:?'required parameter'}"
    local DEV_IMAGE_REPO="${2:?'required parameter'}"
    local GIT_BRANCH="${3:?'required parameter'}"
    local TEST_IMAGE_NAME="${4:?'required parameter'}"

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    local latest_image="${DEV_IMAGE_REPO}:latest"
    local branch_image="${DEV_IMAGE_REPO}:${GIT_BRANCH}"

    if [[ "${CI}" == true ]]; then
        # Test for required environment variables exported in CI jobs
        test "${DOCKER_PASS:?'required environment variable'}"
        test "${DOCKER_USER:?'required environment variable'}"
        test "${RELEASE_BRANCHES:?'required environment variable'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "tagging and pushing image -- ${dev_image}"
        docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
        docker push "${dev_image}"

        if [[ "${GIT_BRANCH}" == 'master' ]]; then
            print_colorized WARN "tagging & pushing image -- ${latest_image}"
            docker tag "${dev_image}" "${latest_image}"
            docker push "${latest_image}"

        elif [[ "${RELEASE_BRANCHES}" =~ "${GIT_BRANCH}" ]]; then
            print_colorized WARN "tagging & pushing image -- ${branch_image}"
            docker tag "${dev_image}" "${branch_image}"
            docker push "${branch_image}"
        fi
    else
        print_colorized WARN "tagging and pushing image -- ${dev_image}"
        continue_prompt
        docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
        docker push "${dev_image}"
    fi
}

push_rc_image() {
    local COMMIT_SHA="${1:?'required parameter'}"
    local DEV_IMAGE_REPO="${2:?'required parameter'}"
    local GIT_TAG="${3:?'required parameter'}"

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    local rc_image="${DEV_IMAGE_REPO}:${GIT_TAG}"

    if [[ "${CI}" == true ]]; then
        # Test for required environment variables exported in CI jobs
        test "${DOCKER_PASS:?'required environment variable'}"
        test "${DOCKER_USER:?'required environment variable'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "pulling dev image for release candidate -- ${dev_image}"
        docker pull "${dev_image}"

        print_colorized WARN "tagging and pushing image -- ${rc_image}"
        docker tag "${dev_image}" "${rc_image}"
        docker push "${rc_image}"
    else
        print_colorized WARN "CI=true must be set to push image -- ${rc_image}"
    fi
}

push_prod_image_release() {
    local DEV_IMAGE_REPO="${1:?'required parameter'}"
    local GIT_BRANCH="${2:-'required parameter'}"
    local GIT_TAG="${3:?'required parameter'}"
    local PROD_IMAGE_REPO="${4:?'required parameter'}"

    local prod_image="${PROD_IMAGE_REPO}:${GIT_TAG}"
    local rc_image="${DEV_IMAGE_REPO}:$(git describe --match "${GIT_TAG}-rc*" --tags --abbrev=0)"

    if [[ "${CI}" == true ]]; then
        # Test for required environment variables exported in CI jobs
        test "${DOCKER_PASS:?'required environment variable'}"
        test "${DOCKER_USER:?'required environment variable'}"
        test "${LATEST_RELEASE_BRANCH:?'required environment variable'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "pulling RC image for release -- ${rc_image}"
        docker pull "${rc_image}"

        print_colorized WARN "tagging and pushing image -- ${prod_image}"
        docker tag "${rc_image}" "${prod_image}"
        docker push "${prod_image}"

        if [[ "${GIT_BRANCH}" == "${LATEST_RELEASE_BRANCH}" ]]; then
            local latest_image="${PROD_IMAGE_REPO}:latest"
            print_colorized WARN "tagging and pushing image -- ${latest_image}"
            docker tag "${prod_image}" "${latest_image}"
            docker push "${latest_image}"
        fi
    else
        print_colorized WARN "CI=true must be set to push image -- ${prod_image}"
    fi
}

push_prod_image_rebuild() {
    local COMMIT_SHA="${1:?'required parameter'}"
    local DEV_IMAGE_REPO="${2:?'required parameter'}"
    local GIT_TAG="${3:?'required parameter'}"
    local PROD_IMAGE_REPO="${4:?'required parameter'}"

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    local rebuild_image="${PROD_IMAGE_REPO}:${GIT_TAG}"

    if [[ "${CI}" == true ]]; then
        # Test for required environment variables exported in CI jobs
        test "${DOCKER_PASS:?'required environment variable'}"
        test "${DOCKER_USER:?'required environment variable'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "pulling dev image for release candidate -- ${dev_image}"
        docker pull "${dev_image}"

        print_colorized WARN "tagging and pushing image -- ${rebuild_image}"
        docker tag "${dev_image}" "${rebuild_image}"
        docker push "${rebuild_image}"
    else
        print_colorized WARN "CI=true must be set to push image -- ${rebuild_image}"
    fi
}