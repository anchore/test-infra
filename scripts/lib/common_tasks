#!/usr/bin/env bash

#####################################################
###   COMMON TASK COMMANDS - ALPHABETICAL ORDER   ###
#####################################################

# These functions are intended to be utilized as task commands invoked from the run_make_task script
# All tasks are generic between projects and should be reusable

kind_cluster_down() {
    local CLUSTER_NAME="${1:?'required parameter'}"

    kind delete cluster --name "${CLUSTER_NAME}"
}

kind_cluster_up() {
    local CLUSTER_NAME="${1:?'required parameter'}"
    local CLUSTER_CONFIG="${2:?'required parameter'}"
    local KUBERNETES_VERSION="${3:?'required parameter'}"

    local kind_node_image_tag="v${KUBERNETES_VERSION}"

    # if a kind cluster named e2e-testing is running export config, otherwise create a new cluster
    if ! kind get clusters | grep "${CLUSTER_NAME}"; then
        kind create cluster --name "${CLUSTER_NAME}" --config "${CLUSTER_CONFIG}" --image "kindest/node:${kind_node_image_tag}" --wait 60s
    fi
}

setup_e2e_tests() {
    COMMIT_SHA="${1:?'required parameter'}"
    DEV_IMAGE_REPO="${2:?'required parameter'}"
    GIT_BRANCH="${3:?'required parameter'}"
    GIT_TAG="${4:?'required parameter'}"
    TEST_IMAGE_NAME="${5:?'required parameter'}"

    local helm_deploy_name="e2e-testing-${RANDOM:0:5}"
    local anchore_image=''
    local anchore_ui_image=''

    if [[ "${GIT_TAG}" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
        # get the latest rc git tag for this semver & use it for the image tag
        anchore_image="${DEV_IMAGE_REPO}:$(git describe --match "${GIT_TAG}-rc*" --tags --abbrev=0)"
        print_colorized WARN "detected semver git tag, using RC image for e2e testing -- ${anchore_image}"

    elif docker inspect "${TEST_IMAGE_NAME}" &> /dev/null; then
        anchore_image="${TEST_IMAGE_NAME}"
        print_colorized WARN "using local dev image for e2e testing -- ${anchore_image}"
        kind load docker-image "${anchore_image}" --name e2e-testing

    else
        anchore_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
        print_colorized WARN "using remote dev image for e2e testing -- ${anchore_image}"
    fi

    # determine what ui image to use for testing
    if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "anchore/anchore-on-prem-ui-dev:${GIT_TAG}" &> /dev/null; then
        anchore_ui_image="anchore/anchore-on-prem-ui-dev:${GIT_TAG}"
    elif DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect "anchore/anchore-on-prem-ui-dev:${GIT_BRANCH}" &> /dev/null; then
        anchore_ui_image="anchore/anchore-on-prem-ui-dev:${GIT_BRANCH}"
    else
        anchore_ui_image="anchore/anchore-on-prem-ui-dev:latest"
    fi
    print_colorized WARN "using remote dev UI image for e2e testing -- ${anchore_ui_image}"

    kind export kubeconfig --name e2e-testing

    if [[ "${CI:-false}" == true ]]; then
        # Test for required environment variables exported in CI jobs
        test "${DOCKER_PASS:?'required environment variable'}"
        test "${DOCKER_USER:?'required environment variable'}"
        test "${ANCHORE_LICENSE:?'required environment variable'}"

        # create anchore enterprise license secret using base64 encoded license file in $ANCHORE_LICENSE
        printf '%s' "${ANCHORE_LICENSE}" | base64 --decode > license.yaml

        # create k8s secret using $DOCKER_USER & $DOCKER_PASS and set as default imagePullCreds
        kubectl create secret docker-registry anchore-enterprise-pullcreds --docker-server=docker.io --docker-username="${DOCKER_USER}" --docker-password="${DOCKER_PASS}" --docker-email=anchoreci@anchore.com
        kubectl patch serviceaccount default --type=merge --patch '{"imagePullSecrets":[{"name": "anchore-enterprise-pullcreds"}]}'
    fi

    if [[ -f license.yaml ]]; then
        kubectl create secret generic anchore-enterprise-license --from-file=license.yaml=license.yaml
    else
        print_colorized ERROR "ERROR - a valid anchore license.yaml file must exist in the project directory" && exit 1
    fi

    helm repo add stable https://kubernetes-charts.storage.googleapis.com
    helm_install_log=$(helm install "${helm_deploy_name}" -f test/e2e/base-values.yaml --set anchoreEnterpriseGlobal.engineImage=${anchore_image} --set anchoreEnterpriseGlobal.image=${anchore_image} --set anchoreEnterpriseUi.image=${anchore_ui_image} stable/anchore-engine)
    echo "${helm_install_log}" | head -n6

    # Patch anchore-engine-api nodeport to the configured port thats mapped with kind to localhost:8228
    kubectl patch service "${helm_deploy_name}-anchore-engine-api" --type=json --patch '[{"op": "replace", "path": "/spec/ports/0/nodePort", "value":30028}]'
}