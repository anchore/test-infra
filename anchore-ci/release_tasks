#!/usr/bin/env bash

############################################################
# Release tasks. These are intended to be reusable across
# projects, and easily overriden.
############################################################

push-dev-image() {
    local COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
    local DEV_IMAGE_REPO="${2:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_BRANCH="${3:?'Missing required parameter: GIT_BRANCH'}"
    local TEST_IMAGE_NAME="${4:?'Missing required parameter: TEST_IMAGE_NAME'}"

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    local latest_image="${DEV_IMAGE_REPO}:latest"
    local branch_image="${DEV_IMAGE_REPO}:${GIT_BRANCH}"

    print_colorized INFO "Tagging and pushing dev image."; echo

    # Test for required environment variables exported by CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required env variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required env variable: DOCKER_PASS'}"
        test "${RELEASE_BRANCHES:?'Missing required env variable: RELEASE_BRANCHES'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized INFO "Tagging and pushing dev image ${dev_image}."; echo
        docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
        docker push "${dev_image}"

        if [[ "${GIT_BRANCH}" == 'master' ]]; then
            print_colorized INFO "Tagging and pushing image ${latest_image}."; echo
            docker tag "${dev_image}" "${latest_image}"
            docker push "${latest_image}"
        elif [[ "${RELEASE_BRANCHES}" == *"${GIT_BRANCH}"* ]]; then
            print_colorized INFO "Tagging and pushing image ${branch_image}."; echo
            docker tag "${dev_image}" "${branch_image}"
            docker push "${branch_image}"
        fi
    else
        print_colorized INFO "Tagging and pushing image ${dev_image}."; echo
        continue_prompt
        docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
        docker push "${dev_image}"
    fi

    print_colorized INFO "Finished tagging and pushing dev image."; echo
}

push-rc-image() {
    local COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
    local DEV_IMAGE_REPO="${2:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_TAG="${3:?'Missing required parameter: GIT_TAG'}"

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    local rc_image="${DEV_IMAGE_REPO}:${GIT_TAG}"

    print_colorized WARN "Pushing RC image."; echo

    # Test for required environment variables exported by CI system
    if [[ "${CI}" == true ]]; then
        test "${DOCKER_USER:?'Missing required environment variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required environment variable: DOCKER_PASS'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized INFO "Pulling dev image for release candidate: ${dev_image}."; echo
        docker pull "${dev_image}"

        print_colorized WARN "Tagging and pushing image ${rc_image}."; echo
        docker tag "${dev_image}" "${rc_image}"
        docker push "${rc_image}"
    else
        print_colorized ERROR "RC images can only be pushed in the CI enviornment."; echo
    fi
}

push-prod-image-release() {
    local DEV_IMAGE_REPO="${1:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_BRANCH="${2:-'Missing required parameter: GIT_BRANCH'}"
    local GIT_TAG="${3:?'Missing required parameter: GIT_TAG'}"

    print_colorized WARN "Tagging and pushing production image."; echo

    local prod_image="${PROD_IMAGE_REPO}:${GIT_TAG}"
    local rc_image="${DEV_IMAGE_REPO}:$(git describe --match "${GIT_TAG}-rc*" --tags --abbrev=0)"

    # Test for required environment variables exported from CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required environment variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required environment variable: DOCKER_PASS'}"
        test "${LATEST_RELEASE_BRANCH:?'Missing required environment variable: LATEST_RELEASE_BRANCH'}"
        test "${PROD_IMAGE_REPO:?'Missing required environment variable: PROD_IMAGE_REPO'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "Pulling RC image for release ${rc_image}."; echo
        docker pull "${rc_image}"

        print_colorized WARN "Tagging and pushing production image ${prod_image}."; echo
        docker tag "${rc_image}" "${prod_image}"
        docker push "${prod_image}"

        if [[ "${GIT_BRANCH}" == "${LATEST_RELEASE_BRANCH}" ]]; then
            local latest_image="${PROD_IMAGE_REPO}:latest"
            print_colorized WARN "Tagging and pushing production image ${latest_image}."; echo
            docker tag "${prod_image}" "${latest_image}"
            docker push "${latest_image}"
        fi
    else
        print_colorized ERROR "Production images can only be pushed in the CI environment."; echo
    fi
}

push-prod-image-rebuild() {
    local COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
    local DEV_IMAGE_REPO="${2:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_TAG="${3:?'Missing required parameter: GIT_TAG'}"

    print_colorized WARN "Rebuilding image '${TEST_IMAGE_NAME}'."; echo

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"

    # Test for required environment variables from CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required env variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required env variable: DOCKER_PASS'}"
        test "${PROD_IMAGE_REPO:?'Missing required environment variable: PROD_IMAGE_REPO'}"

        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "Pulling dev image for release candidate ${dev_image}."; echo
        docker pull "${dev_image}"

        print_colorized WARN "Tagging and pushing image ${rebuild_image}."; echo
    		local rebuild_image="${PROD_IMAGE_REPO}:${GIT_TAG}"
        docker tag "${dev_image}" "${rebuild_image}"
        docker push "${rebuild_image}"
    else
        print_colorized ERROR "Production images can only be pushed in the CI environment."; echo
    fi
}
