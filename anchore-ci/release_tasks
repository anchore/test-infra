#!/usr/bin/env bash

############################################################
# Release tasks. These are intended to be reusable across
# projects, and easily overriden.
############################################################

push-nightly-image() {
    local COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
    local DEV_IMAGE_REPO="${2:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_BRANCH="${3:?'Missing required parameter: GIT_BRANCH'}"
    local TEST_IMAGE_NAME="${4:?'Missing required parameter: TEST_IMAGE_NAME'}"

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    local nightly_image="${DEV_IMAGE_REPO}:nightly"

    # Test for required environment variables exported by CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required env variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required env variable: DOCKER_PASS'}"

        print_colorized INFO "Preparing image ${dev_image} for push to DockerHub."; echo
        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized INFO "Tagging and pushing dev image ${dev_image}."; echo
        docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
        docker push "${dev_image}"

        print_colorized INFO "Tagging and pushing image ${nightly_image}."; echo
        docker tag "${dev_image}" "${nightly_image}"
        docker push "${nightly_image}"

    else
        print_colorized ERROR "Nightly images should only be pushed in the CI enviornment."; echo
    fi

    print_colorized INFO "Finished tagging and pushing dev image."; echo
}

push-dev-image() {
    local COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
    local DEV_IMAGE_REPO="${2:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_BRANCH="${3:?'Missing required parameter: GIT_BRANCH'}"
    local TEST_IMAGE_NAME="${4:?'Missing required parameter: TEST_IMAGE_NAME'}"

    local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
    local latest_image="${DEV_IMAGE_REPO}:latest"

    # Test for required environment variables exported by CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required env variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required env variable: DOCKER_PASS'}"

        print_colorized INFO "Preparing image ${dev_image} for push to DockerHub."; echo
        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized INFO "Tagging and pushing dev image ${dev_image}."; echo
        docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
        docker push "${dev_image}"

        print_colorized INFO "Tagging and pushing image ${latest_image}."; echo
        docker tag "${dev_image}" "${latest_image}"
        docker push "${latest_image}"

    else
        print_colorized INFO "Tagging and pushing image ${dev_image} using local credentials."; echo
        continue_prompt
        docker tag "${TEST_IMAGE_NAME}" "${dev_image}"
        docker push "${dev_image}"
    fi

    print_colorized INFO "Finished tagging and pushing dev image."; echo
}

push-rc-image() {
    local COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
    local DEV_IMAGE_REPO="${2:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_TAG="${3:?'Missing required parameter: GIT_TAG'}"

    # Test for required environment variables exported by CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required environment variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required environment variable: DOCKER_PASS'}"

        local dev_image="${DEV_IMAGE_REPO%%-dev*}:dev"
        local rc_image="${DEV_IMAGE_REPO}:${GIT_TAG}"

        print_colorized WARN "Preparing image ${rc_image} for push to DockerHub."; echo
        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized INFO "Pulling dev image for release candidate: ${dev_image}."; echo
        docker pull "${dev_image}"

        print_colorized WARN "Tagging and pushing image ${rc_image}."; echo
        docker tag "${dev_image}" "${rc_image}"
        docker push "${rc_image}"
    else
        print_colorized ERROR "RC images can only be pushed in the CI enviornment."; echo
    fi
}

push-prod-image-release() {
    local DEV_IMAGE_REPO="${1:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_BRANCH="${2:-'Missing required parameter: GIT_BRANCH'}"
    local GIT_TAG="${3:?'Missing required parameter: GIT_TAG'}"

    # Test for required environment variables exported by CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required environment variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required environment variable: DOCKER_PASS'}"
        test "${LATEST_RELEASE_MAJOR_VERSION:?'Missing required environment variable: LATEST_RELEASE_MAJOR_VERSION'}"
        test "${PROD_IMAGE_REPO:?'Missing required environment variable: PROD_IMAGE_REPO'}"

        local latest_tag_regex="^v${LATEST_RELEASE_MAJOR_VERSION}\.[0-9]+\$"
        local prod_image="${PROD_IMAGE_REPO}:${GIT_TAG}"
        local rc_image="${DEV_IMAGE_REPO}:$(git describe --match "${GIT_TAG}-rc*" --tags --abbrev=0)"

        print_colorized WARN "Preparing image ${prod_image} for push to DockerHub."; echo
        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "Pulling RC image ${rc_image} for release."; echo
        docker pull "${rc_image}"

        print_colorized WARN "Tagging and pushing production image ${prod_image}."; echo
        docker tag "${rc_image}" "${prod_image}"
        docker push "${prod_image}"

        if [[ "${GIT_TAG}" =~ ${latest_tag_regex} ]]; then
            local latest_image="${PROD_IMAGE_REPO}:latest"
            print_colorized WARN "Tagging and pushing production image ${latest_image}."; echo
            docker tag "${prod_image}" "${latest_image}"
            docker push "${latest_image}"
        fi
    else
        print_colorized ERROR "Production images can only be pushed in the CI environment."; echo
    fi
}

push-prod-image-rebuild() {
    local COMMIT_SHA="${1:?'Missing required parameter: COMMIT_SHA'}"
    local DEV_IMAGE_REPO="${2:?'Missing required parameter: DEV_IMAGE_REPO'}"
    local GIT_TAG="${3:?'Missing required parameter: GIT_TAG'}"

    # Test for required environment variables exported by CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required env variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required env variable: DOCKER_PASS'}"
        test "${PROD_IMAGE_REPO:?'Missing required environment variable: PROD_IMAGE_REPO'}"

        local dev_image="${DEV_IMAGE_REPO}:${COMMIT_SHA}"
        local rebuild_image="${PROD_IMAGE_REPO}:${GIT_TAG}"

        print_colorized WARN "Preparing image ${rebuild_image} for push to DockerHub."; echo
        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

        print_colorized WARN "Pulling dev image for release candidate ${dev_image}."; echo
        docker pull "${dev_image}"

        print_colorized WARN "Tagging and pushing image ${rebuild_image}."; echo
        docker tag "${dev_image}" "${rebuild_image}"
        docker push "${rebuild_image}"
    else
        print_colorized ERROR "Production images can only be pushed in the CI environment."; echo
    fi
}

push-redhat-image() {
    local GIT_TAG="${1:?'Missing required parameter: GIT_TAG'}"
    local REDHAT_RELEASE="${2:-r0}"

    # Test for required environment variables exported by CI system
    if [[ "${CI:-false}" == true ]]; then
        test "${DOCKER_USER:?'Missing required env variable: DOCKER_USER'}"
        test "${DOCKER_PASS:?'Missing required env variable: DOCKER_PASS'}"
        test "${PROD_IMAGE_REPO:?'Missing required environment variable: PROD_IMAGE_REPO'}"
        test "${REDHAT_REGISTRY:?'Missing required environment variable: REDHAT_REGISTRY'}"
        test "${REDHAT_PASS:?'Missing required environment variable: REDHAT_PASS'}"

        local prod_image="${PROD_IMAGE_REPO}:${GIT_TAG}"
        local redhat_image="${REDHAT_REGISTRY}:${GIT_TAG}-${REDHAT_RELEASE}"

        print_colorized WARN "Pulling production image for RedHat release ${prod_image}."; echo
        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
        docker pull "${prod_image}"

        print_colorized WARN "Tagging and pushing production image to RedHat Connect."; echo
        docker logout
        echo "${REDHAT_PASS}" | docker login -u unused --password-stdin scan.connect.redhat.com

        print_colorized WARN "Tagging and pushing RedHat image ${redhat_image}."; echo
        docker tag "${prod_image}" "${redhat_image}"
        docker push "${redhat_image}"

    else
        print_colorized ERROR "RedHat images can only be pushed in the CI environment."; echo
    fi
}
