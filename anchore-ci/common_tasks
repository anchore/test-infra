#!/usr/bin/env bash

############################################################
# Common CI tasks. These are intended to be reusable across
# projects, and easily overriden.
############################################################

clean-py-cache() {
    print_colorized WARN "Finding and deleting .py[co] files & __pycache__ directories."; echo
    continue_prompt
    find . \( -type f -name "*.py[co]" -o -type d -name "__pycache__" \) -delete
    print_colorized INFO "Found and deleted .py[co] files & __pycache__ directories."; echo
}

clean-tox() {
    print_colorized WARN "Deleting .tox directory."; echo
    continue_prompt
    rm -rf .tox
    print_colorized INFO "Deleted .tox directory."; echo
}

clean-venv() {
    local VENV="${1:?'Missing required parameter: VENV.'}"
    print_colorized WARN "Deleting virtualenv ${VENV}."; echo
    continue_prompt
    rm -rf "${VENV}"
    print_colorized INFO "Deleted virtualenv ${VENV}."; echo
}

clean-dist() {
    print_colorized WARN "Deleting build and dist data."; echo
    continue_prompt
    rm -rf ./*.egg-info dist build
    print_colorized INFO "Deleted build and dist data."; echo
}

clean-image() {
    local IMAGE_NAME="${1:?'Missing required parameter: IMAGE_NAME.'}"
    print_colorized WARN "Deleting Docker image '${IMAGE_NAME}.'"; echo
    continue_prompt
    image=$(docker images -q "${IMAGE_NAME}")
    if [[ -n "${image}" ]]; then
        docker rmi "${image}"
        print_colorized INFO "Deleted Docker image '${IMAGE_NAME}.'"; echo
    else
        print_colorized INFO "Did not find Docker image '${IMAGE_NAME}.'"; echo
    fi
}

clean() {
    local VENV="${1:?'Missing required parameter: VENV.'}"
    local TEST_IMAGE_NAME="${2:?'Missing required parameter: TEST_IMAGE_NAME.'}"
    if [[ ${NOPROMPT:-false} == true ]]; then
        clean-all-noprompt "${VENV}" "${TEST_IMAGE_NAME}"
    else
        clean-prompt
        while true; do
            read -p "Type clean task here: " clean_task
            case ${clean_task} in
                all ) clean-all "${VENV}" "${TEST_IMAGE_NAME}"; break;;
                venv ) clean-venv "${VENV}"; break;;
                dist ) clean-dist; break;;
                tox ) clean-tox; break;;
                cache ) clean-py-cache; break;;
                image ) clean-image "${TEST_IMAGE_NAME}"; break;;
                * ) clean-prompt;;
            esac
        done
    fi
}

clean-all() {
    local VENV="${1:?'Missing required parameter: VENV.'}"
    local TEST_IMAGE_NAME="${2:?'Missing required parameter: TEST_IMAGE_NAME.'}"
    (clean-venv "${VENV}")
    (clean-dist)
    (clean-tox)
    (clean-py-cache)
    (clean-image "${TEST_IMAGE_NAME}")
}

clean-prompt() {
    printf "${WARN}"
    cat << EOF

    This will prompt you to delete each category (5 prompts).
    If you prefer to clean all without these prompts, try running `make clean-noprompt`.

    Which of the following clean tasks would you like to run?
        all
        cache
        dist
        image
        tox
        venv
EOF
    printf "${RESET}"; echo
}

clean-all-noprompt() {
    local VENV="${1:?'Missing required parameter: VENV.'}"
    local IMAGE_NAME="${2:?'Missing required parameter: IMAGE_NAME.'}"
    print_colorized WARN "Deleting image, virtualenv, cache, build and testing temp data."; echo
    set -x
    rm -rf "${VENV}" ./*.egg-info dist build .tox
    find . \( -type f -name "*.py[co]" -o -type d -name "__pycache__" \) -delete
    bash_debug "test image: ${IMAGE_NAME}"
    image=$(docker images -q "${IMAGE_NAME}")
    if [[ -n "${image}" ]]; then
        docker rmi "${image}"
    fi
    set +x
    print_colorized INFO "Finished deleting image, virtualenv, cache, build and testing temp data."; echo
}

lint() {
    hash tox || python -m pip install -q tox

    print_colorized INFO "Linting code."; echo

    tox -e flake8

    print_colorized INFO "Finished linting code."; echo
}

test-unit() {
    # Declare default tox envs, but allow TOX_ENV to override
    local default_tox_envs="py27 py36"
    local tox_env="${TOX_ENV:-$default_tox_envs}"

    hash tox || python -m pip install -q tox

        # Allow location of tox.ini to be passed in, optionally
    local TOX_CONFIG="${1:-}"
        local TOX_ARGS=""

        if [[ -n ${TOX_CONFIG} ]]; then
                TOX_ARGS="-c ${TOX_CONFIG}"
        fi

    print_colorized INFO "Running unit tests."; echo

    for e in $(echo "${tox_env}"); do
        print_colorized INFO "Running unit tests using tox env $e."
        tox ${TOX_ARGS} tests/unit -e "$e" --result-json .tox/unit-test-report.log

        print_colorized INFO "Finished running unit tests using tox env $e."
    done

    print_colorized INFO "Finished running unit tests."; echo
}

test-functional() {
    # Declare default tox envs, but allow TOX_ENV to override
    local default_tox_envs="py36-anchore_latest py36-anchore_0.6.0 py36-anchore_0.5.1"
    local tox_env="${TOX_ENV:-$default_tox_envs}"

    hash tox || python -m pip install -q tox

        # Allow location of tox.ini to be passed in, optionally
    local TOX_CONFIG="${1:-}"
        local TOX_ARGS=""

        if [[ -n ${TOX_CONFIG} ]]; then
                TOX_ARGS="-c ${TOX_CONFIG}"
        fi

    print_colorized INFO "Running functional tests."; echo

    for e in $(echo "${tox_env}"); do
        print_colorized INFO "Running functional tests using tox env $e."
        tox ${TOX_ARGS} -e "$e" --result-json .tox/functional-test-report.log
        print_colorized INFO "Finished running functional tests using tox env $e."
    done

    print_colorized INFO "Finished running functional tests."; echo
}

# TODO rework this so that VENV is optional
install-cluster-deps() {
    local VENV="${1:?'Missing required parameter: VENV'}"

    print_colorized INFO "Installing dependencies to run local k8s cluster."

    local arch="$(uname | tr '[:upper:]' '[:lower:]')"
    local kind_version="v0.7.0"
    local kubectl_version="v1.15.0"
    local helm_version="v3.1.1"

    if [[ ! -x "${VENV}/bin/kind" ]]; then
        print_colorized WARN "Installing kind"
        curl -qsSLo "${VENV}/bin/kind" "https://github.com/kubernetes-sigs/kind/releases/download/${kind_version}/kind-${arch}-amd64"
        chmod +x "${VENV}/bin/kind"
    else
        print_colorized INFO "kind already installed."
    fi

    if [[ ! -x "${VENV}/bin/helm" ]]; then
        print_colorized WARN "Installing helm"
        curl -sSL "https://get.helm.sh/helm-${helm_version}-${arch}-amd64.tar.gz" | tar xzf - -C "${VENV}/bin" --strip-components=1 "${arch}-amd64/helm"
        chmod +x "${VENV}/bin/helm"
    else
        print_colorized INFO "helm already installed."
    fi

    if [[ ! -x "${VENV}/bin/kubectl" ]]; then
        print_colorized WARN "Installing kubectl"
        curl -sSLo "${VENV}/bin/kubectl" "https://storage.googleapis.com/kubernetes-release/release/${kubectl_version}/bin/${arch}/amd64/kubectl"
        chmod +x "${VENV}/bin/kubectl"
    else
        print_colorized INFO "kubectl already installed."
    fi

    print_colorized INFO "Finished installing dependencies to run local k8s cluster."
}

cluster-up() {
    local CLUSTER_NAME="${1:?'Missing required parameter: CLUSTER_NAME'}"
    local CLUSTER_CONFIG="${2:?'Missing required parameter: CLUSTER_CONFIG'}"
    local K8S_VERSION="${3:?'Missing required parameter: K8S_VERSION'}"

    local kind_node_image_tag="v${K8S_VERSION}"

    # if a kind cluster named e2e-testing is running export config, otherwise create a new cluster
    if ! kind get clusters | grep "${CLUSTER_NAME}"; then
        kind create cluster --name "${CLUSTER_NAME}" --config "${CLUSTER_CONFIG}" --image "kindest/node:${kind_node_image_tag}" --wait 60s
    else
        print_colorized INFO "Kind cluster already running."
    fi
}

cluster-down() {
    local CLUSTER_NAME="${1:?'Missing required parameter: CLUSTER_NAME'}"

    kind delete cluster --name "${CLUSTER_NAME}"
}

compose-up() {
    local TEST_IMAGE_NAME="${1:?'Missing required parameter: TEST_IMAGE_NAME'}"
    local COMPOSE_FILE="${2:?'Missing required parameter: COMPOSE_FILE'}"

    hash docker-compose || python -m pip install docker-compose

    export TEST_IMAGE_NAME
    docker-compose -f ${COMPOSE_FILE} up -d
}

compose-down() {
    local TEST_IMAGE_NAME="${1:?'Missing required parameter: TEST_IMAGE_NAME'}"
    local COMPOSE_FILE="${2:?'Missing required parameter: COMPOSE_FILE'}"

    hash docker-compose || python -m pip install docker-compose

    export TEST_IMAGE_NAME
    docker-compose -f ${COMPOSE_FILE} down
}
