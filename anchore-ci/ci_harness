#!/usr/bin/env bash

# Fail on any errors, including in pipelines and when variables are missing
set -euo pipefail

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Source CI utility functions and shared tasks
source "${script_dir}/utils"
source "${script_dir}/common_tasks"
source "${script_dir}/release_tasks"

usage() {
    printf "${WARN}"
    cat << EOF

    This script is a simple wrapper or entry point for local CI tasks.  It provides a set of shared tasks
    such as linting and running tests, and allows any of them to be overridden by local files of the same
    name in ./scripts/ci/

    It is expected that the anchore-ci directory in this repository is cloned or copied into your project.
    For example, given the make target:
EOF

    printf "${INFO}"
    cat << EOF

        anchore-ci: ## Fetch test artifacts for local CI
            git clone \$(TEST_INFRA_REPO_URL) /tmp/test-infra
            rm -rf ./anchore-ci && mv /tmp/test-infra/anchore-ci . && rm -rf /tmp/test-infra
EOF

    printf "${WARN}"
    cat << EOF

    Your local makefile can include this as a dependency in other targets.  You can then invoke the
    shared tasks, e.g.:
EOF

    printf "${INFO}"
    cat << EOF

        CI_CMD = anchore-ci/local_ci

        clean: anchore-ci ## Clean up the project directory and delete dev image
            @\$(CI_CMD) clean \$(TEST_IMAGE_NAME)
EOF

    printf "${WARN}"
    cat << EOF

    Shared tasks can be found in the file \`common_tasks\`.

    The following shared tasks are currently supplied:

EOF
    printf "${INFO}"
    cp "${script_dir}/common_tasks" /tmp; echo "declare -F" >> /tmp/common_tasks; eval /tmp/common_tasks | awk '{print "\t" $3}'
    printf "${RESET}"
    echo
}

# Check for valid input arguments
if [[ "$#" -eq 0 ]]; then
    usage
    exit 1
elif [[ "$1" =~ (help|-h) ]]; then
    usage
    exit
fi

# If there's a local task overriding what we're trying to execute, replace
# it in args.
task="scripts/ci/$1"

# Is there a local override?
if [[ -f ${task} ]]; then
    # There is; is it executable?
    if [[ -x ${task} ]]; then
        bash_debug "Running overridden task ${1}."
        args=("$task" "${@:2}")
    else
        print_colorized WARN "${task} exists but it's not executable."
        print_colorized WARN "Try this: 'chmod a+x ${task}', then rerun."; echo
        exit 1
    fi
else
    bash_debug "Running shared task ${1}."
    args="$@"
fi

# Turn things over to the shared or overridden function
bash_debug "Executing ${args[0]}"
${args[@]}

