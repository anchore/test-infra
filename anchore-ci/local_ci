#!/usr/bin/env bash

# Fail on any errors, including in pipelines and when variables are missing
set -euo pipefail

# Source CI utility functions and shared tasks
source ./utils
source ./common_tasks

usage() {
		builtin printf ${WARN}
    cat << EOF

    This script is a simple wrapper or entry point for local CI tasks.  It provides a set of shared tasks
    such as linting and running tests, and allows any of them to be overridden by local files of the same
    name in ./scripts/ci/

    It is expected that the anchore-ci directory in this repository is cloned or copied into your project.
    For example, given the make target:
EOF

    builtin printf ${INFO}
    cat << EOF

        anchore-ci: ## Fetch test artifacts for local CI
            git clone \$(TEST_INFRA_REPO_URL) /tmp/test-infra
            rm -rf ./anchore-ci && mv /tmp/test-infra/anchore-ci . && rm -rf /tmp/test-infra
EOF

		builtin printf ${WARN}
    cat << EOF

    Your local makefile can include this as a dependency in other targets.  You can then invoke the
    shared tasks, e.g.:
EOF

    builtin printf ${INFO}
    cat << EOF

        clean: anchore-ci ## Clean up the project directory and delete dev image
            @\$(CI_CMD) clean \$(TEST_IMAGE_NAME)
EOF

		builtin printf ${WARN}
    cat << EOF

    Shared tasks can be found in the file \`common_tasks\`.

    The following shared tasks are currently supplied:

EOF
    builtin printf ${INFO}
    # Tasks w/underscores are 'helpers', not really meant to be overriden, so don't show them
    cp ./common_tasks /tmp; echo "declare -F" >> /tmp/common_tasks; eval /tmp/common_tasks | grep -v '_' | awk '{print "\t" $3}'
		builtin printf ${RESET}
    echo
}

make_usage() {
    printf '\n%s\n' "Use make from the project root directory to invoke pipeline tasks"
    print_colorized WARN "usage: make < target >"
}

# Check for valid input arguments
if [[ "$#" -eq 0 ]]; then
    #print_colorized ERROR "ERROR local_ci requires input." >&2
    usage
    exit 1

elif [[ "$1" =~ (help|-h) ]]; then
    make_usage
    exit
fi

# VERBOSE will trap all bash commands & print to screen, like using
# set -v but allows printing in color
if [[ "${VERBOSE:-false}" =~ (true|TRUE|y|Y|1|2) ]]; then
    set -o functrace
    trap '(printf "${INFO}%s${BASH_COMMAND}${NORMAL}\n" "+ ") >&2' DEBUG
    if [[ "${VERBOSE:-false}" = "2" ]]; then
        set -x
    fi
fi

# See if there's a local task overriding the task we're trying to execute.
# If there is, execute that instead by replacing args.
task="scripts/ci/$1"
if [[ -f ${task} && -x ${task} ]]; then
  bash_debug "Running overridden task ${1}."
  args=("$task" "${@:2}")
else
  bash_debug "Running shared task ${1}."
  args="$@"
fi

# Turn things over to the shared or overridden function
bash_debug "Executing ${args[0]}"
${args[@]}

