#!/usr/bin/env bash

# Fail on any errors, including in pipelines and when variables are missing
set -euo pipefail

usage() {
    cat << EOF
    This script is intended to be invoked as a docker-entrypoint script for the anchore/test-infra images.
    It is a simple wrapper for invoking CI task scripts/binaries/functions inside the anchore/test-infra image.
    All available task libraries can be found in the following directory of the anchore/test-infra image:

        /anchore-ci/lib

    This script handles UX, sourcing libraries, displaying usage, and verbose output

        usage: $0 < task_name or script/binary >
EOF
}

make_usage() {
    printf '\n%s\n' "Use make from the project root directory to invoke pipeline tasks"
    print_colorized WARN "usage: make < target >"
}

# Source all CI commands & utility functions
common_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common"
for f in ${common_dir}/*; do
  source "$f"
done

# Check for valid input arguments
if [[ "$#" -eq 0 ]]; then
    print_colorized ERROR "ERROR - script requires input" >&2
    usage
    exit 1

elif [[ "$1" =~ (help|-h) ]]; then
    make_usage
    exit
fi

# VERBOSE will trap all bash commands & print to screen, like using
# set -v but allows printing in color
if [[ "${VERBOSE:-false}" =~ (true|TRUE|y|Y|1|2) ]]; then
    set -o functrace
    trap '(printf "${INFO}%s${BASH_COMMAND}${NORMAL}\n" "+ ") >&2' DEBUG
    if [[ "${VERBOSE:-false}" = "2" ]]; then
        set -x
    fi
fi

# See if there's a local task overriding the task we're trying to execute.
# If there is, execute that instead by replacing args.
task="scripts/ci/$1"
if [[ -f ${task} && -x ${task} ]]; then
  bash_debug "Running overridden ${1}."
  args=("$task" "${@:2}")
else
  bash_debug "Running shared ${1}."
  args="$@"
fi

# Turn things over to the shared or overridden function
bash_debug "Executing ${args[0]}"
${args[@]}

